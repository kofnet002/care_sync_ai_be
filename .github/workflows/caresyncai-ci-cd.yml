name: CareSync AI Health System CI/CD

on:
  push:
    branches:
      - main
      - staging
      - develop
  pull_request:
    branches:
      - main
      - staging
      - develop
  workflow_dispatch: {}

env:
  WEB_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/web
  # NGINX_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/nginx
  DB_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/db
  REDIS_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/redis
  CELERY_WORKER: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/celery_worker
  # CELERY_BEAT: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/celery_beat

jobs:
  test:
    runs-on: ubuntu-latest
    # if: github.ref == 'refs/heads/main'
    steps:
      - name: Get source Code
        uses: actions/checkout@v3

      - name: Set up Python 3.12
        uses: actions/setup-python@v2
        with:
          python-version: 3.12

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run tests

        env:
          SECRET_KEY: iO9_^7n6e&*Y*9^%4%^7^4%44#$5e23ftg5r3MB5f
          CORS_ORIGIN_WHITELIST: http://localhost:3000,http://localhost:8000
          CSRF_TRUSTED_ORIGINS: http://localhost:3000,http://localhost:8000
          ALLOWED_IPS: 127.0.0.1
        # run: pytest
        run: python manage.py test

  build-production:
    name: Build Docker Images for Develop
    runs-on: ubuntu-latest
    needs: test
    # if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout main
        uses: actions/checkout@v2
      - name: Add environment variables to .env
        run: |
          echo DEBUG=0 >> .env
          echo DATABASE="postgres" >> .env
          echo POSTGRES_USER=postgres >> .env
          echo POSTGRES_DB=postgres >> .env
          echo POSTGRES_PASSWORD=postgres >> .env

          echo SECRET_KEY="${{ secrets.SECRET_KEY }}" >> .env

          echo DB_USER=${{ secrets.DB_USER }} >> .env
          echo DB_PASS=${{ secrets.DB_PASS }} >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env

          echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
          echo CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }} >> .env
          echo CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }} >> .env

          echo REDIS_HOST="${{ secrets.REDIS_HOST}}" >> .env
          echo REDIS_PORT="${{ secrets.REDIS_PORT}}" >> .env
          echo EMAIL_TOKEN_EXPIRATION_MINUTES="${{ secrets.EMAIL_TOKEN_EXPIRATION_MINUTES}}" >> .env
          echo PASSWORD_TOKEN_EXPIRATION_MINUTES="${{ secrets.PASSWORD_TOKEN_EXPIRATION_MINUTES}}" >> .env
          echo UI_DOMAIN="${{ secrets.UI_DOMAIN}}" >> .env

          echo GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY}}" >> .env
          echo EMAIL_HOST_USER="${{ secrets.EMAIL_HOST_USER}}" >> .env
          echo EMAIL_HOST_PASSWORD="${{ secrets.EMAIL_HOST_PASSWORD}}" >> .env

          echo WEB_IMAGE=${{ env.WEB_IMAGE }} >> .env
          # echo NGINX_IMAGE=${{ env.NGINX_IMAGE }} >> .env
          echo DB_IMAGE=${{ env.DB_IMAGE }} >> .env
          echo REDIS_IMAGE=${{ env.REDIS_IMAGE }} >> .env
          echo CELERY_WORKER=${{ env.CELERY_WORKER }} >> .env
          # echo CELERY_BEAT=${{ env.CELERY_BEAT }} >> .env

      - name: Set environment variables
        run: |
          echo "WEB_IMAGE=$(echo ${{env.WEB_IMAGE}} )" >> $GITHUB_ENV
          # echo "NGINX_IMAGE=$(echo ${{env.NGINX_IMAGE}} )" >> $GITHUB_ENV
          echo "DB_IMAGE=$(echo ${{env.DB_IMAGE}} )" >> $GITHUB_ENV
          echo "REDIS_IMAGE=$(echo ${{env.REDIS_IMAGE}} )" >> $GITHUB_ENV
          echo "CELERY_WORKER=$(echo ${{env.CELERY_WORKER}} )" >> $GITHUB_ENV
          # echo "CELERY_BEAT=$(echo ${{env.CELERY_BEAT}} )" >> $GITHUB_ENV

      - name: Log in to GitHub Packages
        run: echo ${PERSONAL_ACCESS_TOKEN} | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Pull images
        run: |
          docker pull "${{ env.WEB_IMAGE }}" || true
          # docker pull "${{ env.NGINX_IMAGE }}" || true
          docker pull "${{ env.DB_IMAGE }}" || true
          docker pull "${{ env.REDIS_IMAGE }}" || true
          docker pull "${{ env.CELERY_WORKER }}" || true
          # docker pull "${{ env.CELERY_BEAT }}" || true

      - name: Build images
        run: |
          DOCKER_BUILDKIT=1 COMPOSE_DOCKER_CLI_BUILD=1 docker compose -f docker-compose.ci.prod.yml build
      - name: Push images
        run: |
          docker push "${{ env.WEB_IMAGE }}"
          # docker push "${{ env.NGINX_IMAGE }}"
          docker push "${{ env.DB_IMAGE }}"
          docker push "${{ env.REDIS_IMAGE }}"
          docker push "${{ env.CELERY_WORKER }}"
          # docker push "${{ env.CELERY_BEAT }}"

  deploy-production:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: build-production
    # if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout master
        uses: actions/checkout@v2
      - name: Add environment variables to .env
        run: |
          echo DEBUG=1 >> .env
          echo DATABASE="postgres" >> .env
          echo POSTGRES_USER=postgres >> .env
          echo POSTGRES_DB=postgres >> .env
          echo POSTGRES_PASSWORD=postgres >> .env

          echo SECRET_KEY="${{ secrets.SECRET_KEY }}" >> .env

          echo DB_USER=${{ secrets.DB_USER }} >> .env
          echo DB_PASS=${{ secrets.DB_PASS }} >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env

          echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
          echo CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }} >> .env
          echo CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }} >> .env

          echo REDIS_HOST="${{ secrets.REDIS_HOST}}" >> .env
          echo REDIS_PORT="${{ secrets.REDIS_PORT}}" >> .env
          echo EMAIL_TOKEN_EXPIRATION_MINUTES="${{ secrets.EMAIL_TOKEN_EXPIRATION_MINUTES}}" >> .env
          echo PASSWORD_TOKEN_EXPIRATION_MINUTES="${{ secrets.PASSWORD_TOKEN_EXPIRATION_MINUTES}}" >> .env
          echo UI_DOMAIN="${{ secrets.UI_DOMAIN}}" >> .env

          echo GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY}}" >> .env
          echo EMAIL_HOST_USER="${{ secrets.EMAIL_HOST_USER}}" >> .env
          echo EMAIL_HOST_PASSWORD="${{ secrets.EMAIL_HOST_PASSWORD}}" >> .env

          echo WEB_IMAGE=${{ env.WEB_IMAGE }} >> .env
          # echo NGINX_IMAGE=${{ env.NGINX_IMAGE }} >> .env
          echo DB_IMAGE=${{ env.DB_IMAGE }} >> .env
          echo REDIS_IMAGE=${{ env.REDIS_IMAGE }} >> .env
          echo CELERY_WORKER=${{ env.CELERY_WORKER }} >> .env
          # echo CELERY_BEAT=${{ env.CELERY_BEAT }} >> .env

      - name: Add the private SSH key to the ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"

      # - name: Test SSH Connection
      #   run: ssh -p 924 -o StrictHostKeyChecking=no github@${{ secrets.SERVER_IP_ADDRESS }} "echo SSH connection successful"

      - name: Deploy to Production VPS Server
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          scp -p 924 -o StrictHostKeyChecking=no -r ./.env ./docker-compose.cd.prod.yml github@${{ secrets.SERVER_IP_ADDRESS }}:/opt/devs/kofi/app/caresyncai
          ssh -p 924 -o StrictHostKeyChecking=no github@${{ secrets.SERVER_IP_ADDRESS }} << 'ENDSSH'
            cd /opt/devs/kofi/app/caresyncai
            source .env

            docker login ghcr.io -u ${{ secrets.NAMESPACE }} -p ${{ secrets.PERSONAL_ACCESS_TOKEN }}

            docker stop caresyncai_server || true
            docker rm caresyncai_server -f || true

            # docker stop caresyncai_nginx || true
            # docker rm caresyncai_nginx -f || true

            docker stop caresyncai_db || true
            docker rm caresyncai_db -f || true

            docker stop caresyncai_redis || true
            docker rm caresyncai_redis -f || true

            docker stop caresyncai_redis_celery_worker
            docker rm caresyncai_redis_celery_worker -f

            # docker stop caresyncai_redis_celery_beat
            # docker rm caresyncai_redis_celery_beat -f

            # docker images -q | xargs -r docker rmi -f
            docker images | grep caresyncai | awk '{print $3}' | xargs -r docker rmi -f

            docker pull $DB_IMAGE
            docker pull $WEB_IMAGE
            # docker pull $NGINX_IMAGE
            docker pull $REDIS_IMAGE
            docker pull $CELERY_WORKER
            # docker pull $CELERY_BEAT

            DOCKER_BUILDKIT=1 COMPOSE_DOCKER_CLI_BUILD=1 docker compose -f ./docker-compose.cd.prod.yml up -d --remove-orphans

            docker exec -t caresyncai_server python manage.py migrate
            docker compose -f ./docker-compose.cd.prod.yml exec web python manage.py migrate --noinput

            docker exec -t caresyncai_server python manage.py collectstatic --noinput
            docker exec -t caresyncai_server python manage.py migrate --noinput

          ENDSSH
