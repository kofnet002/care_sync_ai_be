# use ports when you want to access the server directly, that's when nginx hasn't been configured
services:
  web:
    build:
      context: .
      dockerfile: Dockerfile.prod
      cache_from:
        - "${WEB_IMAGE}"
    image: "${WEB_IMAGE}"
    container_name: caresyncai_server
    restart: always
    command: python manage.py runserver 0.0.0.0:8000
    platform: linux/amd64
    volumes:
      - .:/usr/src/app/caresyncai
      - static_volume:/usr/src/app/caresyncai/staticfiles
      - media_volume:/usr/src/app/caresyncai/media
    # ports:
    #   - 8000:8000
    expose:
      - 8000
    env_file:
      - .env
    depends_on:
      - db
    networks:
      - backend
    mem_limit: 2g

  db:
    build:
      context: ./docker/db
      cache_from:
        - "${DB_IMAGE}"
    image: "${DB_IMAGE}"
    container_name: caresyncai_db
    restart: always
    platform: linux/amd64
    volumes:
      - caresyncai_postgres_data:/var/lib/postgresql/data/
    ports:
      - 5435:5432
    env_file:
      - .env
    networks:
      - backend
    mem_limit: 1g

  redis:
    build:
      context: ./docker/redis
      cache_from:
        - "${REDIS_IMAGE}"
    image: "${REDIS_IMAGE}"
    container_name: caresyncai_redis
    restart: always
    platform: linux/amd64
    command: redis-server --appendonly yes
    ports:
      - "6382:6379"
    volumes:
      - ./redis-volume:/data
    networks:
      - backend
    mem_limit: 512mb

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.prod
      cache_from:
        - "${CELERY_WORKER}"
    image: "${CELERY_WORKER}"
    container_name: caresyncai_celery_worker
    restart: always
    platform: linux/amd64
    command: ./start-celeryworker.sh
    volumes:
      - .:/usr/src/app/caresyncai
    env_file: .env
    # env_file:
    #   - ./.env.dev
    depends_on:
      - redis
      - db
      - web
      # - nginx
    networks:
      - backend
    mem_limit: 4g

  # celery_beat:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.prod
  #     cache_from:
  #       - "${CELERY_BEAT}"
  #   image: "${CELERY_BEAT}"
  #   container_name: caresynai_celery_beat
  #   restart: always
  #   command: ./start-celerybeat.sh
  #   volumes:
  #     - .:/usr/src/app/caresyncai
  #   env_file: .env
  #   # env_file:
  #   #   - ./.env.dev
  #   depends_on:
  #     - redis
  #     - db
  #     - web
  #     - nginx
  #   networks:
  #     - backend
  #   mem_limit: 512m

  # nginx:
  #   build:
  #     context: ./docker/nginx
  #     cache_from:
  #       - "${NGINX_IMAGE}"
  #   image: "${NGINX_IMAGE}"
  #   container_name: caresyncai_nginx
  #   restart: always
  #   volumes:
  #     - ./docker/nginx/caresyncai.conf:/etc/nginx/conf.d/default.conf
  #     - static_volume:/usr/src/app/caresyncai/staticfiles
  #     - media_volume:/usr/src/app/caresyncai/media
  #   ports:
  #     - 80:80
  #   depends_on:
  #     - web
  #   networks:
  #     - backend
  #   mem_limit: 256mb

volumes:
  caresyncai_postgres_data:
  static_volume:
  media_volume:

networks:
  backend:
    driver: bridge
